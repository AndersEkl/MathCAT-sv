---
- include: "../../definitions.yaml"

- OperatorIntentRenaming: {
    "dimension-product": "by"
  }

- SIPrefixes: {
    "Y": "yotta", "Z": "zetta", "E": "exa", "P": "peta", "T": "tera", "G": "giga", "M": "mega", "k": "kilo", "h": "hecto", "da": "decka",
    "d": "deci", "c": "centi", "m": "milli", "µ": "micro", "n": "nano", "p": "pico", "f": "femto", "a": "atto", "z": "zepto", "y": "yocto"
  }

- SIUnits: {
    # base units
    "A": "amp",
    "cd": "candela",
    "K": "kelvin",
    "K": "kelvin",
    "g": "gram",
    "m": "metre",     # British spelling works for US also
    "mol": "mole",
    "s": "second",
    "″": "second",
    "\"": "second",
    "sec": "second",

    # derived units
    "Bq": "becquerel",
    "C": "coulomb",
    "°C": "degree celsius",
    "℃": "degree celsius",
    "F": "farad",
    "Gy": "gray",
    "H": "henry",
    "Hz": "hertz",
    "J": "joule",
    "kat": "kattel",
    "lm": "lumen",
    "lx": "lux",
    "N": "newton",
    "Ω": "ohm",       # Greek Cap letter
    "Ω": "ohm",       # OHM SIGN
    "Pa": "pascal",
    "rad": "radian",
    "S": "siemens",
    "Sv": "sievert",
    "sr": "sterradion",
    "T": "tesla",
    "V": "volt",
    "W": "watt",
    "Wb": "weber",

    # accepted (plus a few variants)
    "l": "litre",     # British spelling works for US also
    "L": "litre",     # British spelling works for US also
    "ℓ": "litre",     # British spelling works for US also
    "′": "minute",
    "'": "minute",
    "min": "minute",
    "Hr": "hour",
    "h": "hour",
    "d": "day",
    "dy": "day",
    "B": "bel",
    "°": "degree",
    "deg": "degree",
    "Np": "neper",
    "t": "metric ton",
  }

# There are some clashes with SI Units with prefixes and other common units
- SIExceptions: {
    "Pa",   # pascals (not petaannums)
    "dB",   # decibels (not decibytes)
    "cd",   # candelas (not centidays)
    "ch",   # chains (not centihours)
    "pt",   # pint (not picometric tons)
    "ft",   # feet (not femtotonnes)
    "yd",   # yards (not yoctodays)

    # FIX: think about these
    "am",   # arcminute (not attometers)
    "as",   # arcsecond (not attoseconds)
  }
- OtherUnits: {
    "dB": "decibel",
    "ha": "hectare",
    "amu": "atomic mass unit",
    "u": "atomic mass unit",
    "au": "astronomical unit",
    "AU": "astronomical unit",
    "Da": "dalton",
    "eV": "electronvolt",
    "arcmin": "arcminute",
    "amin": "arcminute",
    "am": "arcminute",
    "MOA": "arcminute",
    "arcsec": "arcsecond",
    "asec": "arcsecond",
    "as": "arcsecond",
  }

- EnglishUnits: {
  # FIX: this needs to be flushed out
    "in": "inch",
    "ft": "foot",
    "mi": "mile",
  }

- PluralForm: {
  # FIX: this needs to be flushed out
    "inch": "inches",
    "foot": "feet",
  }

# Lines starting with "#" are a comment
# Each definition in this file is of the form
# - name: { "...", "..." "..." }
# For numbers, 
# - name: [] "...", "..." "..." ]


# ----------------  Cardinal and Ordinal Numbers  --------------------------
# The following definitions are used to convert numbers to words
# The are mainly used for ordinals, of which there are two cases:
# 1. Regular ordinals: first, second, third, ...
# 2. Ordinals used in the denominator of fractions (e.g, one half, one third)
#    When used in the denominator of fractions, a plural version might be
#    used (e.g., two halves, two thirds)
# Although a lot of languages are regular after a few entries, for generality,
# the following lists should be filled out even though they are the same
# or easily derived from others in many languages (e.g, an 's' is added for plurals).
# The larger ordinal numbers (e.g, millionth) is used when there are only
# '0's after that decimal place (e.g., 23000000).:w

# All definitions start 0, 10, 100, etc.

# The definitions for the "ones" should extend until a regular pattern begins
#   The minimum length is 10.

# For English, a regular pattern starts at twenty
- NumbersOnes: [
        "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen",
        "seventeen", "eighteen", "nineteen"
    ]

- NumbersOrdinalOnes: [
        "zeroth", "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth",
        "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth",
        "seventeenth", "eighteenth", "nineteenth"
    ]

- NumbersOrdinalPluralOnes: [
        "zeroth", "first", "seconds", "thirds", "fourths", "fifths", "sixths", "sevenths", "eights", "ninths",
        "tenths", "elevenths", "twelfths", "thirteenths", "fourteenths", "fifteenths", "sixteenths",
        "seventeenths", "eighteenths", "nineteenths"
    ]

    # stop when regularity begins
- NumbersOrdinalFractionalOnes: [
        "zero", "first", "half"
    ]

    # stop when regularity begins
- NumbersOrdinalFractionalPluralOnes: [
        "zeros", "firsts", "halves"
    ]


    # What to use for multiples of 10
- NumbersTens: [
        "", "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"
    ]

- NumbersOrdinalTens: [
        "", "tenth", "twentieth", "thirtieth", "fortieth", "fiftieth", "sixtieth", "seventieth", "eightieth", "ninetieth"
    ]

- NumbersOrdinalPluralTens: [
        "", "tenths", "twentieths", "thirtieths", "fortieths", "fiftieths", "sixtieths", "seventieths", "eightieths", "ninetieths"
    ]


- NumbersHundreds: [
      "", "one hundred", "two hundred", "three hundred", "four hundred", "five hundred",
        "six hundred", "seven hundred", "eight hundred", "nine hundred"
    ]

- NumbersOrdinalHundreds: [
      "", "one hundredth", "two hundredth", "three hundredth", "four hundredth", "five hundredth",
        "six hundredth", "seven hundredth", "eight hundredth", "nine hundredth"
    ]

- NumbersOrdinalPluralHundreds: [
      "", "one hundredths", "two hundredths", "three hundredths", "four hundredths", "five hundredths",
        "six hundredths", "seven hundredths", "eight hundredths", "nine hundredths"
    ]
      

    # At this point, hopefully the language is regular. If not, code needs to be written
- NumbersLarge: [
        "", "thousand", "million", "billion", "trillion", "quadrillion",
        "quintillion", "sextillion", "septillion", "octillion", "nonillion",
    ]
      
- NumbersOrdinalLarge: [
        "", "thousandth", "millionth", "billionth", "trillionth", "quadrillionth",
        "quintillionth", "sextillionth", "septillionth", "octillionth", "nonillionth"
    ]
      
- NumbersOrdinalPluralLarge: [
        "", "thousandths", "millionths", "billionths", "trillionths", "quadrillionths",
        "quintillionths", "sextillionths", "septillionths", "octillionths", "nonillionths"
    ]
