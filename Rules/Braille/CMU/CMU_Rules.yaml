# References such as 7.2(5) refer to the fifth example in section 7.2 in guide from ONCE
# https://www.once.es/servicios-sociales/braille/comision-braille-espanola/documentos-tecnicos/documentos-tecnicos-relacionados-con-el-braille/documentos/b5-signografia-matematica.pdf
---
-
  name: default
  tag: msqrt
  match: "."
  replace: 
  - t: "‚†´‚†±"
  - test:
      if: "*[1][self::m:mrow and not(IsBracketed(., '', ''))]"
      then:
      - t: "‚†¢"
      - x: "*"
      - t: "‚†î"
      else:
      - x: "*"

-
  name: default
  tag: mroot
  match: "."
  replace: 
  - t: "‚†´"
  - x: "*[2]"
  - t: "‚†±"
  - test:
      if: "*[1][self::m:mrow and not(IsBracketed(., '', ''))]"
      then:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"
      else:
      - x: "*[1]"
        
               
# Fraction rules
  # The fraction part of a mixed number is always simple
  # They also differ because a two character sequence is needed to bracket the fraction
  # The invisible plus should produce an empty string

-
  name: common-fraction-mixed-number
  tag: mfrac
  match:
    - "preceding-sibling::*[1][self::m:mo][text()='\u2064'] and" # preceding element is invisible plus
    - "*[1][self::m:mn][not(contains(., '.,'))]   and" 
    - "*[2][self::m:mn][not(contains(., '.,'))]"
  replace: 
  - t: "#"   # need to force a number sign between the numbers
  - x: "BrailleChars(translate(*[1], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'CMU')"   # drop numbers for the numerator
  - x: "*[2]"

-
  name: numeric-slash
  tag: mrow
  match: "*[1][self::m:mn][not(contains(., '.,'))] and *[2][self::m:mo][.='/']  and *[3][self::m:mn][not(contains(., '.,'))]"
  replace:
  - x: "BrailleChars(translate(*[1], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'CMU')"   # drop numbers for the numerator
  # '/' not used
  - x: "*[3]"

-
  name: simple-number
  tag: mfrac
  match: "*[1][self::m:mn][not(contains(., '.,'))] and *[2][self::m:mn][not(contains(., '.,'))]"
  replace:
  - x: "BrailleChars(translate(*[1], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'CMU')"   # drop numbers for the numerator
  - x: "*[2]"

-
  name: default
  tag: mfrac
  match: "."
  variables: [AddGrouping: "preceding-sibling::*[2][self::m:mi][IsInDefinition(., 'CMUFunctionNames')]"] # '2' skip function
  replace: 
  # Inferring from the examples 7.5.2(11) and 7.7(2) fractions are bracketed after log/trig functions
  # FIX: try to find exact rule
  - test:
      if: "$AddGrouping"
      then: [t: "‚†¢"]
  - test:
      if: "*[1][self::m:mrow and not(IsBracketed(., '', '')) and
            not(count(*)=3 and *[1][self::m:mi][IsInDefinition(., 'CMUFunctionNames')])]"  
      then:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"
      else:
      - x: "*[1]"
  - t: "‚†≤"
  - test:
      if: "*[2][self::m:mrow and not(IsBracketed(., '', '')) and
            not(count(*)=3 and *[1][self::m:mi][IsInDefinition(., 'CMUFunctionNames')])]"
      then:
      - t: "‚†¢"
      - x: "*[2]"
      - t: "‚†î"
      else:
      - x: "*[2]"
  - test:
      if: "$AddGrouping"
      then: [t: "‚†î"]

#
# Matrix/Determinant rules
# matrix and determinant are the same other than "matrix"/"determinant" based on the bracketing chars
# we don't do spatial layout, instead the beginning/ending of each row uses the enlarged bracketing chars
-
  name: default-matrix
  tag: mrow
  variables:
    - RowStart: "*[1]"
    - RowEnd: "*[3]"
  match:
    - "*[2][self::m:mtable] and"
    - (IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '|', '|'))
  replace: [x: "*[2]"]

-
   name: default-mtable
   tag: mtable
   match: "."
   replace: [x: "*"]

-
  name: default
  tag: [mtr, mlabeledtr]
  match: "."
  replace:
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - t: ""
   - x: $RowStart
   - test:
      if: .[self::m:mlabeledtr]
      then:
         - t: "‚†ó‚†ï‚†∫W‚†á‚†Å‚†É‚†ë‚†á‚†∏‚†í"  # "row label:"
         - x: "*[1]/*"           # contents of row label
   - test:
      if: .[self::m:mlabeledtr]
      then: [x: "*[position()>1]"]
      else: {x: "*"}
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - x: $RowEnd

-
  name: default
  tag: mtd
  match: "."
  replace:
  - test:
      if: "*"
      then:
      - test: 
         if: "preceding-sibling::*"
         then: [t: "W"]
      - x: "*"
      # else nothing to braille

-
  name: no-content
  tag: math
  match: "not(*)"      # empty
  replace: [t: "W"]    # not sure that is right, but this shouldn't happen

-
  name: default
  tag: math
  match: "."
  variables:
    - RowStart: "''"           # empty string -- it needs to be set
    - RowEnd: "''"             # empty string -- it needs to be set
    - NewScriptContext: "''"    # empty string -- it needs to be set
  replace: [x: "*"]

-
  name: empty-mrow
  tag: mrow
  match: "not(*)"
  replace: [t: "W"] # not sure what is correct -- if in a fraction, probably something is better than nothing

-
  # 1.3 says that if the character after a closing(?) bar has any of dots 1, 2, or 3, then a blank must be added.
  # The rule should exam the translation of right sibling, but there is no way to do that.
  # The ugly hack is to define a variable lists all the chars with dots in any of position 1, 2, or 3.
  # This is obviously error prone as the list needs to be potentially updated when new chars are added.
  #
  # FIX: I tested the IsInDefinition call for cases when the right child is a structure.
  # It grabs the text of the leftmost child, but this is wrong if some braille indicators come first,
  #   such as a sqrt or implicit grouping. All of these cases have dots in positions 1, 2, or 3.
  #   We do a one level down test for these cases, but it is only a band-aid
  name: space-after-bar
  tag: mrow
  variables: [NextRealChild: "IfThenElse(following-sibling::*[1][.='\u2062'], following-sibling::*[2], following-sibling::*[1])"]
  match:
  - "IsBracketed(., '|', '|') and $NextRealChild and"
  - "( $NextRealChild[self::m:msqrt] or $NextRealChild[self::m:mroot] or"    # have indicator with dots in first half
  - "  (IsNode($NextRealChild, '2D') and $NextRealChild[*[1][self::m:mrow and not(IsBracketed(., '', ''))]]) or"  # grouping char added which has dots in first half 
  - "  IsInDefinition(substring($NextRealChild, 1, 1), 'CMUCharsWithDotsOnLeft')"
  - ")"
  replace:
  - x: "*"
  - t: "W"

-
  # 7.5.1 defines special rule for binomial
  name: binomial-frac
  tag: mrow
  match: "IsBracketed(., '(', ')') and *[2][self::m:mfrac][@linethickness=0]"
  replace: 
  - t: "‚†®‚†£"
  - x: "*[2]/*[1]"
  - t: "‚†í"
  - x: "*[2]/*[2]"
  - t: "‚†ú"

- name: binomial-table
  tag: mrow
  match: "IsBracketed(., '(', ')') and *[2][self::m:mtable][count(*)=2 and count(*[1])=1] and contains(@intent, 'binomial(')"
  replace:
  - t: "‚†®‚†£"
  - x: "*[2]/*[1]/*[1]/*[1]"
  - t: "‚†í"
  - x: "*[2]/*[2]/*[1]/*[1]"
  - t: "‚†ú"
  
-
  name: default
  tag: mrow
  match: "."
  replace: [x: "*"]

-
  # Non-breaking whitespace is added to the start/end of numbers in cases of adjoining text to help the parse.
  # These generate a different char inside of a number, so we peel them off here because it doesn't seem possible
  # to ask "what character position am I inside of an mn?" in unicode.yaml
  # Here we deal with the messy abnormal case separately -- CMU seems to want to leave out spaces
  name: peel-off-spaces
  tag: [mn, mi]
  match: "starts-with(., '\u00A0') or substring(., string-length(.), 1)='\u00A0'"
  replace:
  - test:
      if: "starts-with(., '\u00A0')"
      then:
      - test:
          if: "substring(., string-length(.), 1)='\u00A0'"
          then:
          - x: "BrailleChars(., 'CMU', 2, string-length(.))"
          - test:
              if: following-sibling::*[2][@class='MathML-unit' or BaseNode(.)[@class='MathML-unit']]  # '*[2]' to skip invisible times
              then: [t: "ùêñ"]   # BANA 5(a) -- Units are treated as separate exprs
              else: [t: "W"]
          else:
          - x: "BrailleChars(., 'CMU', 2, string-length(.)+1)"
      else:
      - test:
          if: "substring(., string-length(.), 1)='\u00A0'"
          then:
          - x: "BrailleChars(., 'CMU', 1, string-length(.))"
          - test:
              if: following-sibling::*[2][@class='MathML-unit' or BaseNode(.)[@class='MathML-unit']]  # '*[2]' to skip invisible times
              then: [t: "ùêñ"]   # BANA 5(a) -- Units are treated as separate exprs
              else: [t: "W"]
          else:
          - x: "BrailleChars(., 'CMU', 1, string-length(.)+1)"

-
  # 3.3 says that hex-like numbers don't reuse a numeric indicator after a letter -- here we try to catch that case.
  # Match if: 1) has a digit, 2) has A-F after first char, 3) only has digits and A-F
  name: hex-number
  tag: [mn, mtext]
  match:
  - "string-length(translate(., '0123456789', '')) <string-length(.) and "
  - "string-length(translate(substring(., 2), 'abcdefABCDEF', '')) <string-length(.) and "
  - "translate(., '0123456789abcdefABCDEF', '')=''"
  replace:
    - x: "BrailleChars(concat(substring(.,1,1), translate(substring(., 2), 'abcdefABCDEF',
              '\ue00a\ue00b\ue00c\ue00d\ue00e\ue00f\ue00a\ue00b\ue00c\ue00d\ue00e\ue00f')), 'CMU')"

-
  name: default
  tag: [mn, mo, mtext]
  match: "."
  replace:
    - x: "BrailleChars(., 'CMU')"
      
-
  name: default
  tag: mi
  match: "."
  replace:
    - x: "BrailleChars(., 'CMU')"   # also deals with "dot after 'arc'"
    - test:
        if: "IsInDefinition(., 'CMUFunctionNames')"
        then: [t: "."]
      

-
  name: default
  tag: mstyle
  match: "."
  replace:
  - test:
      if: "*"
      then: [x: "*"]
      # else do nothing -- no content

-
  name: dot-exception  # 
  tag: mover
  match: "*[2][self::m:mo and (.='Àô' or .='¬®' or .='‚Éõ')]"   # 0x02d9, 0x00A8, 0x20db
  replace:
  - x: "*[2]"
  - test:   # roman lower case letters need to be prefixed (1.1)
      if: "*[1][self::m:mi and string-length(.)=1 and translate(., 'abcdefghijklmnopqrstuvwxyz', '') = '']"
      then: [t: "‚†ê"]
  - x: "*[1]"

-
  # special hack to catch double over/under bar built from nested mover/munder
  # FIX: the ones below need vetting
  name: doubled-over-hack-exception 
  tag: [mover, munder]
  match:
  - "*[2][self::m:mo and string-length(.) = 1 and (.='¬Ø')] and"    # has line/bar
  - "( (self::m:mover and *[1][self::m:mover]) or (self::m:munder and *[1][self::m:munder]) ) and"  # both mover/munder
  - "*[1]/*[2][self::m:mo and string-length(.) = 1 and (.='¬Ø')]"  # other mover/munder has line/bar
  replace: 
  - test:
      if: "self::m:munder"
      then: [t: "‚††‚†§‚††‚†§"]
      else: [t: "‚†à‚†â‚†à‚†â"]
  - test:
      if: "*[1]/*[1][IsNode(., 'leaf') and string-length(.) = 1]"
      then:
      - x: "*[1]/*[1]"
      else:
      - t: "‚†¢"
      - x: "*[1]/*[1]"
      - t: "‚†î"

-
  # several "normal" bar-like symbols have special treatment, but the manual doesn't seem to have a comprehensive list
  # FIX: the ones below need vetting
  name: over-exceptions  
  tag: [mover, munder]
  match: "*[2][self::m:mo and string-length(.) = 1 and ( translate(., '_¬Ø‚ïê‚Üí.Àô~^','')='' or (parent::m:mover and text()='‚åí') )]"
  replace: 
  - test:
    - if: "self::m:munder[*[2][.='¬Ø' or .='‚ïê']]"  # mover falls back to the unicode defs
      then_test:
          if: "*[2][.='‚ïê']"
          then: [t: "‚††‚†§‚††‚†§"]
          else: [t: "‚††‚†§"]
    # - else_if: "*[2][text()='‚Üí']"
    #   then: [t: "‚†ò‚†±"]
    # - else_if: "*[2][text()='.' or text()='Àô']"
    #   then: [t: "‚†ò‚†≤"]
    - else_if: "*[2][text()='~']"
      then: [t: "‚†ê‚†¢"]
    # - else_if: "*[2][text()='^']"
    #   then: [t: "‚†ê‚†± "]
    # - else_if: "*[2][text()='=']"
    #   then: [t: "‚†ê‚†± "]
      else: [x: "*[2]"]  # maybe not right, but do something
  - test:
      # FIX: CMUFunctionNames is a guess based on 7.2(1) and 7.1(2) which involves "lim" without explanation
      if: "*[1][IsNode(., 'leaf') and (string-length(.) = 1 or IsInDefinition(., 'CMUFunctionNames'))]"
      then:
      - x: "*[1]"
      else:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"

-
  name: prime-exception    # 2.3.1
  tag: msup
  match: "*[2][translate(., \"‚Ä≤‚Ä≥‚Ä¥‚Åó\",'')='']"
  replace:
  - x: "*"

-
  name: single-char-exceptions    # 2.3.1
  tag: msup
  match: "*[2][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
  replace:
  - x: "*"
  - test:
      # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
      if: "not(*[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
      then: [t: "‚†Ñ"]

-
  # this is the last part of the section -- something like "4*" in superscript indicating 4 "*"s
  name: number-char-exceptions    # 2.3.1 and 2.3.3  (FIX: degree doesn't use dot-3 for chemistry or temp/angles/etc)
  tag: [msub, msup]
  match:
  - "*[2][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')=''] or"
  - "*[2][self::m:mrow and count(*)=2 and *[1][self::m:mn] and *[2][self::m:mo][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']]"
  replace:
  - x: "*[1]"
  - test:
      - if: "self::m:msub"
        then: [t: "‚†å"]
        else: [t: "‚†°"]
  - x: "*[2]"
  - test:
      # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
      if: "not(*[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
      then: [t: "‚†Ñ"]

-  # 7.5.2
  name: log
  tag: msub
  match: "*[1][self::m:mi][.='log']"
  replace: 
  - x: "*[1]"
  - x: "*[2]"
  - t: "‚†±"

-  # 7.2 (guessing this applies to limits written with munder and msub)
  name: limit
  tag: [msub, munder]
  match: "*[1][self::m:mi][.='lim']"
  replace: 
  - x: "*[1]"
  - x: "*[2]"
  - t: "‚†±"

-  # 7.5.4
  name: integral-sum-product
  tag: [msubsup, munderover]
  match: "*[1][self::m:mo][translate(., '‚à´‚à¨‚à≠‚àë‚àè', '')='']"
  replace:
  - test:
    - if: "*[1][.='‚à´']"
      then: [t: "‚†Ø"]
    - else_if: "*[1][.='‚à¨']"
      then: [t: "‚†Ø‚†Ø"]
    - else_if: "*[1][.='‚à¨']"
      then: [t: "‚†Ø‚†Ø"]
    - else_if: "*[1][.='‚à≠']"
      then: [t: "‚†Ø‚†Ø‚†Ø"]
      else: [x: "*[1]"]    # ‚àë, ‚àè
  - x: "*[2]"
  - t: "‚†í"
  - x: "*[3]"
  - t: "‚†±"

-  # 7.5.4
  name: contour-integral
  tag: msub
  match: "*[1][self::m:mi][.='‚àÆ']"
  replace:
  - t: "‚†Ø‚†¥" 
  - x: "*[2]"
  - t: "‚†±"

-
  name: nested-scripts    # this case likely should have been written as mmultiscripts, but people will use this (2.5)
  tag: msub
  match: "*[1][self::m:msup]"
  replace:
  - x: "*[1]/*[1]"
  - t: "‚†°"
  - x: "*[1]/*[2]"
  - t: "‚†∞‚†å"
  - x: "*[2]"

-
  name: nested-scripts    # this case likely should have been written as mmultiscripts, but people will use this (2.5)
  tag: msup
  match: "*[1][self::m:msub]"
  replace:
  - x: "*[1]/*[1]"
  - t: "‚†å"
  - x: "*[1]/*[2]"
  - t: "‚†ò‚†°"
  - x: "*[2]"

-
  name: simple-base
  # FIX: in 7.7, footnote 37 seems to imply that the rule in 2.2 only applies to characters -- we generalize to tokens here
  tag: [msubsup]
  match: "IsNode(*[1], 'leaf')"
  replace: 
  - x: "*[1]"
  - t: "‚†å"
  - test:
      # the rules for scripts seem to always want a nested script to be bracketed
      # there aren't any root examples in scripts and it seems like fractions don't get bracketed
      # also, a leading - seems not to require grouping 
      # FIX: does this apply to leading +, ¬±, etc? 
      if: "*[2][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
      then:
      - t: "‚†¢"
      - x: "*[2]"
      - t: "‚†î"
      else:
      - x: "*[2]"
  - t: "‚†°"
  - test:
        # the rules for scripts seem to always want a nested script to be bracketed
        # there aren't any root examples and it seems like fractions don't get bracketed
        if: "*[3][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
        then:
        - t: "‚†¢"
        - x: "*[3]"
        - t: "‚†î"
        else:
        - x: "*[3]"

-  # FIX: I think is is what footnote #37 in 7.7 means (applies to 7.4 [integrals, etc] also)
  name: default
  tag: msubsup
  match: "."
  replace:
  - test:
      if: "*[1][self::m:mrow and not(IsBracketed(., '', ''))]"
      then:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"
      else:
      - x: "*[1]"
  - x: "*[2]"
  - t: "‚†í"
  - x: "*[3]"
  - t: "‚†±"
-
  name: default
  tag: [msub, msup, munder, mover, munderover]
  match: "."
  replace: 
  - test:
      if: "*[1][self::m:mrow and not(IsBracketed(., '', ''))]"
      then:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"
      else:
      - x: "*[1]"
  - test:
      - if: "self::m:msub or self::m:msubsup"
        then: [t: "‚†å"]
      - else_if: "self::m:msup"
        then: [t: "‚†°"]
      - else_if: "self::m:munder or self::m:munderover"
        then: [t: "‚†å‚†å"]
        else: [t: "‚†°‚†°"]  # mover
  - test:
      # the rules for scripts seem to always want a nested script to be bracketed
      # there aren't any root examples in scripts and it seems like fractions don't get bracketed
      # also, a leading - seems not to require grouping 
      # FIX: does this apply to leading +, ¬±, etc? 
      if: "*[2][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
      then:
      - t: "‚†¢"
      - x: "*[2]"
      - t: "‚†î"
      else:
      - x: "*[2]"
  - test:
      if: "self::m:msubsup or self::m:munderover"
      then:
      - test:
          - if: "self::m:msubsup"
            then: [t: "‚†°"]
            else: [t: "‚†°‚†°"]  # munderover
      - test:
          # the rules for scripts seem to always want a nested script to be bracketed
          # there aren't any root examples and it seems like fractions don't get bracketed
          if: "*[3][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
          then:
          - t: "‚†¢"
          - x: "*[3]"
          - t: "‚†î"
          else:
          - x: "*[3]"

-
  # FIX: this works staggered indices, but there aren't examples where staggered and simultaneous indices are next to each other
  name: default
  tag: mmultiscripts
  match: "."
  variables:
  # computing the number of postscripts is messy because of <mprescripts> being optionally present -- we use "mod" to get the count right
  - Prescripts: "m:mprescripts/following-sibling::*"
  - NumChildren: "count(*)"       # need to stash this since the count is wrong inside '*[...]' below
  - Postscripts: "*[position()>1 and position() < (last() + ($NumChildren mod 2) -count($Prescripts))]"
  replace:
  - x: "*[1]"
  - test:
      if: "$Prescripts"
      then:
      - test:
          if: "not($Prescripts[1][self::m:none])"
          then:
          - t: "‚††‚†å"
          - test:
              if: "$Prescripts[1][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
              then:
              - t: "‚†¢"
              - x: "$Prescripts[1]"
              - t: "‚†î"
              else:
              - x: "$Prescripts[1]"
      - test:
          if: "not($Prescripts[2][self::m:none])"
          then:
          - t: "‚†à‚†°"
          - test:
              if: "$Prescripts[2][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
              then:
              - t: "‚†¢"
              - x: "$Prescripts[2]"
              - t: "‚†î"
              else:
              - x: "$Prescripts[2]"
      - test:
          if: "count($Prescripts)>2"
          then:
          - test:
              if: "not($Prescripts[3][self::m:none])"
              then:
              - with:
                  variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                  replace:
                  - t: "1‚†¢"
                  - test:
                      # omit grouping indicators in the following cases
                      if:   # FIX: need to add arbitrary shapes here (also for mroot)
                        - "$Prescripts[3][self::m:mn or"
                            # next test is to make sure there is just one symbol
                            # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                        - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                        - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                        - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                        - "     IsInDefinition(., 'Arrows')"
                        - "    ]"
                      then: [x: "$Prescripts[3]"]
                      else:
                      - t: "1‚†£"
                      - x: "$Prescripts[3]"
                      - t: "1‚†ú"
          - test:
              if: "not($Prescripts[4][self::m:none])"
              then:
              - with:
                  variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                  replace:
                  - t: "1‚†î"
                  - test:
                      # omit grouping indicators in the following cases
                      if:   # FIX: need to add arbitrary shapes here (also for mroot)
                      - "$Prescripts[4][self::m:mn or"
                          # next test is to make sure there is just one symbol
                          # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                      - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                      - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                      - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                      - "     IsInDefinition(., 'Arrows')"
                      - "    ]"
                      then: [x: "$Prescripts[4]"]
                      else:
                      - t: "1‚†£"
                      - x: "$Prescripts[4]"
                      - t: "1‚†ú"
          - test:
              if: "count($Prescripts) > 4"   # give up and just dump them out so at least the content is there
              then: [x: "$Prescripts[position() > 4]"]

  - test:
      if: "$Postscripts"
      then:
      - test:
          if: "not($Postscripts[1][self::m:none])"
          then:
          - t: "‚†å"
          - test:
              if: "$Postscripts[1][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
              then:
              - t: "‚†¢"
              - x: "$Postscripts[1]"
              - t: "‚†î"
              else:
              - x: "$Postscripts[1]"
      - test:
          if: "not($Postscripts[2][self::m:none])"
          then:
          - t: "‚†°"
          - test:
              if: "$Postscripts[2][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
              then:
              - t: "‚†¢"
              - x: "$Postscripts[2]"
              - t: "‚†î"
              else:
              - x: "$Postscripts[2]"
      - test:
          if: "count($Postscripts)>2"
          then:
          - test:
              if: "not($Postscripts[3][self::m:none])"
              then:
              - t: "‚†∞‚†å"
              - test:
                  if: "$Postscripts[3][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
                  then:
                  - t: "‚†¢"
                  - x: "$Postscripts[3]"
                  - t: "‚†î"
                  else:
                  - x: "$Postscripts[3]"
          - test:
              if: "not($Postscripts[4][self::m:none])"
              then:
              - t: "‚†ò‚†°"
              - test:
                  if: "$Postscripts[4][(self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')]"
                  then:
                  - t: "‚†¢"
                  - x: "$Postscripts[4]"
                  - t: "‚†î"
                  else:
                  - x: "$Postscripts[4]"
          - test:
              if: "count($Postscripts)>4"
              then:
              - test:
                  if: "not($Postscripts[5][self::m:none])"
                  then:
                  - with:
                      variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                      replace:
                      - t: "1‚†¢"
                      - test:
                          # omit grouping indicators in the following cases
                          if:   # FIX: need to add arbitrary shapes here (also for mroot)
                          - "$Postscripts[5][self::m:mn or"
                            # next test is to make sure there is just one symbol
                            # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                          - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                          - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                          - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                          - "     IsInDefinition(., 'Arrows')"
                          - "    ]"
                          then: [x: "$Postscripts[5]"]
                          else:
                          - t: "1‚†£"
                          - x: "$Postscripts[5]"
                          - t: "1‚†ú"
              - test:
                  if: "not($Postscripts[6][self::m:none])"
                  then:
                  - with:
                      variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                      replace:
                      - t: "1‚†î"
                      - test:
                          # omit grouping indicators in the following cases
                          if:   # FIX: need to add arbitrary shapes here (also for mroot)
                          - "$Postscripts[6][self::m:mn or"
                            # next test is to make sure there is just one symbol
                            # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                          - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                          - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                          - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                          - "     IsInDefinition(., 'Arrows')"
                          - "    ]"
                          then: [x: "$Postscripts[6]"]
                          else:
                          - t: "1‚†£"
                          - x: "$Postscripts[6]"
                          - t: "1‚†ú"
              - test:
                  if: "count($Postscripts)>6"
                  then:
                  - test:
                      if: "not($Postscripts[7][self::m:none])"
                      then:
                      - with:
                          variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                          replace:
                          - t: "1‚†¢"
                          - test:
                              # omit grouping indicators in the following cases
                              if:   # FIX: need to add arbitrary shapes here (also for mroot)
                              - "$Postscripts[7][self::m:mn or"
                                  # next test is to make sure there is just one symbol
                                  # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                              - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                              - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                              - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                              - "     IsInDefinition(., 'Arrows')"
                              - "    ]"
                              then: [x: "$Postscripts[7]"]
                              else:
                              - t: "1‚†£"
                              - x: "$Postscripts[7]"
                              - t: "1‚†ú"
                  - test:
                      if: "not($Postscripts[8][self::m:none])"
                      then:
                      - with:
                          variables: [NewScriptContext: "in"]   # value doesn't matter -- just can't be empty string
                          replace:
                          - t: "1‚†î"
                          - test:
                            # omit grouping indicators in the following cases
                              if:   # FIX: need to add arbitrary shapes here (also for mroot)
                              - "$Postscripts[8][self::m:mn or"
                                  # next test is to make sure there is just one symbol
                                  # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
                              - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
                              - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
                              - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
                              - "     IsInDefinition(., 'Arrows')"
                              - "    ]"
                              then: [x: "$Postscripts[8]"]
                              else:
                              - t: "1‚†£"
                              - x: "$Postscripts[8]"
                              - t: "1‚†ú"
                  - test:
                      if: "count($Postscripts) > 8"   # give up and just dump them out so at least the content is there
                      then:
                      - t: "b"    # 82.b -- need to add level indicator between adjacent (not simultaneous) scripts (assumes one of sub/super is not 'none')
                      - x: "$Postscripts[position() > 8]"
                  

-
# Note: @notation can contain more than one value
# I don't think CMU has a good way to represent all notations, especially when in combination
# FIX: this needs to be flushed out
  name: default
  tag: menclose
  match: "."
  replace:
  - test:
      if: "contains(@notation,'top')"
      then:
      - t: "‚†à‚†â"                        # bar
  - test:
      if: "contains(@notation,'horizontalstrike')"
      then:
      - t: "‚†ò"                        # cancellation
  - test:   # roman lower case letters need to be prefixed (1.1)
      if: "*[1][self::m:mi and string-length(.)=1 and translate(., 'abcdefghijklmnopqrstuvwxyz', '') = '']"
      then: [t: "‚†ê"]
  - test:  # group anything that isn't a single character
      if: "*[1][IsNode(., 'leaf') and string-length(.)=1]"
      then: [x: "*[1]"]
      else:
      - t: "‚†¢"
      - x: "*[1]"
      - t: "‚†î"
    
  #  - test:
  #     if: "contains(concat(' ', normalize-space(@notation), ' '), ' left ')"                  #avoid 'leftarrow'
  #     then: [t: "‚†∏"]
  #  - test:
  #     if: "contains(@notation,'box')"                  # box and roundedbox
  #     then:
  #     # - test:
  #     #       if: "$AddSpaces"
  #     #       then: [t: " "]
  #     - t: "1‚†´‚†º‚†ô"                                  # square (no rectangle in UEB)
  #  - test:
  #     if: "contains(@notation,'circle')"
  #     then:
  #     # - test:
  #     #    if: "$AddSpaces"
  #     #    then: [t: " "]
  #     - t: "1‚†´‚†ø"                                  # circle (no oval in UEB)
# ??? What should happen with arrow?
#  If there is a box/circle with arrows only and an empty child,
#     then it acts like the arrow is the child
#  If there are only arrows for 'notation', then maybe rule 112 applies (superposition),
#     but the examples aren't similar. In that case, the arrow acts like 'box' and the child is the content... maybe  
# 
#  - test:
#      if: "contains(@notation,'leftarrow')"
#      then: [t: left arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' rightarrow ')"
#      then: [t: right arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastarrow')"
#      then: [t: northeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southeastarrow ')"
#      then: [t: southeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southwestarrow ')"
#      then: [t: southwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestarrow')"
#      then: [t: northwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'updownarrow')"
#      then: [t: double ended vertical arrow, pause: short]
#  - test:
#      if: "contains(@notation,'leftrightarrow')"
#      then: [t: double ended horizontal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastsouthwestarrow')"
#      then: [t: double ended up diagonal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestsoutheastarrow')"
#      then: [t: double ended down diagonal arrow, pause: short]
#  - test:
#      if: ".[contains(@notation,'actuarial')]"
#      then: [t: actuarial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'madrub')]"
#      then: [t: arabic factorial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'longdiv') or not(@notation) or normalize-space(@notation) ='']"      # default
#      then: [t: long division symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'radical')]"
#      then: [t: square root, pause: short]

  #  - test:
  #     # omit grouping indicators in the following cases
  #     if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
  #           # next test is to make sure there is just one symbol
  #           # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
  #     - "*[1][self::m:mn or"
  #     - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
  #     - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
  #     - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
  #     - "     IsInDefinition(., 'Arrows')"
  #     - "    ]"
  #     then: [x: "*[1]"]
  #     else:
  #     - t: "1‚†£"
  #     - x: "*[1]"
  #     - t: "1‚†ú"

   # - test:
   #    if: "contains(@notation,'phasorangle')"  #FIX: what should this be???
   #    then: [t: "‚†´‚†™‚†∏‚†´"]
  #  - test:
  #     if: "contains(@notation,'arrow')"    # all the arrows
  #     then:
  #     - test:
  #        - if: "contains(@notation,'rightarrow')" 
  #          then: [t: "1‚†≥‚†ï"]                                                           
  #        - else_if: "contains(@notation,'leftarrow')" 
  #          then: [t: "1‚†≥‚†™"]                                                           
  #        - else_if: "contains(@notation,'uparrow')" 
  #          then: [t: "1‚†≥‚†¨ "]                                                           
  #        - else_if: "contains(@notation,'downarrow')" 
  #          then: [t: "1‚†≥‚†©"]                                                           
  #        - else_if: "contains(@notation,'northeastarrow')" 
  #          then: [t: "1‚†≥‚†é"]                                                           
  #        - else_if: "contains(@notation,'southeastarrow')" 
  #          then: [t: "1‚†≥‚†£"]                                                           
  #        - else_if: "contains(@notation,'northwestarrow')" 
  #          then: [t: "1‚†≥‚†±"]                                                           
  #        - else_if: "contains(@notation,'southwestarrow')" 
  #          then: [t: "1‚†≥‚†ú"]                                                           
  #        - else_if: "contains(@notation,'leftrightarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†ï"]                                                           
  #        - else_if: "contains(@notation,'updownarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†¨"]                                                           
  #        - else_if: "contains(@notation,'northeastsouthwestarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†é"]                                                           
  #        - else_if: "contains(@notation,'northwestsoutheastarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†£"]                                                           
  #  - test:
  #     if: "contains(@notation,'top')"
  #     then: [t: "‚†±"]                                                                
  #  - test:
  #     if: "contains(@notation,'bottom')"
  #     then: [t: "‚††‚†±"]                                                                
  #  - test:
  #     if: "contains(@notation,'updiagonalstrike') or contains(@notation,'downdiagonalstrike') or 
  #           contains(@notation,'verticalstrike') or contains(@notation,'horizontalstrike')"
  #     then:
  #        - t: "‚†ò"                        # cancellation
  #  - test:
  #     if:
  #     - "not($AddSpaces) and contains(@notation,'box') or contains(@notation,'circle') or"
  #     - "contains(@notation,'arrow') or contains(@notation,'phasorangle')" 
  #     then:
  #     - t: "‚†ª"                   # terminate shape
  #     # - test:
  #     #    if: "$AddSpaces"
  #     #    then: [t: " "]
  #  - test:
  #     if: "contains(concat(' ', normalize-space(@notation), ' '), ' right ')"                  #avoid 'rightarrow'
  #     then: [t: "‚†∏"]



-
   name: default
   tag: ms
   match: "."
   replace:
      - test:
         if: "string(@lquote)!=''"
         then: [x: "@lquote"]
         else: [t: "‚†Ñ‚†Ñ"]
      - x: "BrailleChars(., 'CMU')"
      - test:
         if: "string(@rquote)!=''"
         then: [x: "@rquote"]
         else: [t: "‚†Ñ‚†Ñ"]

-
   name: default
   tag: semantics
   match: "."
   replace: 
      - x: "*[1]"             #/ FIX: should prioritize @encoding="MathML-Presentation" and @encoding="application/mathml-presentation+xml"

-
   name: default-children
   tag: "*"
   match: "*"    # make sure there are children
   replace: 
   - t: "unknown math m l element"
   - x: "name(.)"
   - x: "*"

-
   # at this point, we know there are no children -- might be no text
   name: default-no-children
   tag: "*"
   match: "text()"
   replace: 
   - t: unknown math m l element
   - x: "name(.)"
   - x: "text()"

-
   name: default-no-text
   tag: "*"
   match: "."
   replace: 
    - t: "empty unknown math m l element"
    - x: "name(.)"
